{"version":3,"sources":["components/CustomEmailField.js","components/CustomImage.js","components/products.js","components/type.js","App.js","serviceWorker.js","index.js"],"names":["makeStyles","link","textDecoration","icon","width","paddingLeft","useStyles","image","CustomPhotos","record","source","classes","className","src","ProductFilter","props","Filter","TextInput","label","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","ProductList","List","filters","Datagrid","rowClick","TextField","ProductEdit","Edit","SimpleForm","NumberInput","ProductCreate","Create","TypeList","TypeEdit","TypeCreate","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","options","logging","dataProvider","FirebaseDataProvider","firebaseAuthProvider","FirebaseAuthProvider","App","Admin","authProvider","Resource","name","list","edit","create","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a60af9e7.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\n\nconst useStyles = makeStyles({\n    link: {\n        textDecoration: 'underline',\n    },\n    icon: {\n        width: '0.5em',\n        paddingLeft: 2,\n    },\n});\n\nconst CustomEmailField = ({ record = {}, source }) => {\n    const classes = useStyles();\n    return (\n        <a href={\"mailto:\" + record[source]} className={classes.link}>\n            {record[source]}\n            <MailOutlineIcon className={classes.icon} />\n        </a>\n    );\n}\n\n\nexport default CustomEmailField;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\n\nconst useStyles = makeStyles({\n    image: {\n        width: '2.5em',\n    },\n});\n\n\nconst CustomPhotos =({ record = {}, source }) => {\n    const classes = useStyles();\n\n\n    return (\n        <img className={classes.image} src={record[source] +\".png\"} />\n    )\n\n}\n\nexport default CustomPhotos;\n","import React from 'react';\r\nimport {\r\n    List,\r\n    TextInput,\r\n    SimpleForm,\r\n    Edit,\r\n    Create,\r\n    ReferenceInput,\r\n    SelectInput,\r\n    Datagrid,\r\n    ReferenceField,\r\n    TextField,\r\n    EmailField,\r\n    EditButton,\r\n    EditGuesser,\r\n    Filter,\r\n    NumberInput,\r\n    ReferenceArrayInput,\r\n    SelectArrayInput,\r\n    ChipField\r\n} from 'react-admin';\r\nimport RichTextInput from 'ra-input-rich-text';\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\n\r\nexport const ProductFilter = props => (\r\n    <Filter {...props}>\r\n        <TextInput label=\"Name\" source=\"name\" alwaysOn />\r\n        <ReferenceInput label=\"Category\" source=\"id\" reference=\"type\" allowEmpty>\r\n            <SelectInput optionText=\"name\" />\r\n        </ReferenceInput>\r\n    </Filter>\r\n)\r\n\r\n\r\nexport const ProductList = props => (\r\n    <List filters={<ProductFilter />} {...props}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" label=\"product id\" />\r\n            <TextField source=\"name\" />\r\n            <TextField source=\"price\" />\r\n            <TextField source=\"description\" />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const ProductEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"id\" />\r\n            <TextInput source=\"name\" />\r\n            <NumberInput source=\"price\" />\r\n            <RichTextInput source=\"description\" />\r\n            {/* <ReferenceArrayInput reference=\"type\" source=\"id\">\r\n                <SelectArrayInput>\r\n                    <ChipField source=\"category\" />\r\n                </SelectArrayInput>\r\n            </ReferenceArrayInput> */}\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const ProductCreate = props => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"id\" />\r\n            <TextInput source=\"name\" />\r\n            <NumberInput source=\"price\" />\r\n            <RichTextInput source=\"description\" />\r\n            {/* <ReferenceArrayInput reference=\"type\" source=\"id\">\r\n                <SelectArrayInput>\r\n                    <ChipField source=\"category\" />\r\n                </SelectArrayInput>\r\n            </ReferenceArrayInput> */}\r\n        </SimpleForm>\r\n    </Create>\r\n);","import React from 'react';\r\nimport {\r\n    List,\r\n    TextInput,\r\n    SimpleForm,\r\n    Edit,\r\n    Create,\r\n    Datagrid,\r\n    TextField,\r\n    ReferenceField,\r\n} from 'react-admin';\r\nimport CustomPhotos from \"./CustomImage\";\r\n\r\n\r\nexport const TypeList = props => (\r\n    <List {...props}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"name\" />\r\n            <CustomPhotos source=\"url\" />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const TypeEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"id\" />\r\n            <TextInput source=\"name\" />\r\n            <TextInput source=\"url\" />\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const TypeCreate = props => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"id\" />\r\n            <TextInput source=\"name\" />\r\n            <TextInput source=\"url\" />\r\n        </SimpleForm>\r\n    </Create>\r\n);","import React from 'react';\nimport { Admin, Resource, ListGuesser, EditGuesser } from 'react-admin';\nimport jsonServerProvider from 'ra-data-json-server';\nimport { UserList } from \"./components/users\";\nimport { PostCreate, PostEdit, PostList } from \"./components/posts\";\nimport authProvider from \"./providers/authProvider\";\nimport {\n    FirebaseAuthProvider, FirebaseDataProvider\n} from 'react-admin-firebase';\n\n// Icon\n// import GroupIcon from '@material-ui/icons/Group';\n// import PostAddIcon from '@material-ui/icons/PostAdd';\n// import FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\n// import PhotoAlbumIcon from '@material-ui/icons/PhotoAlbum';\nimport PhotoSizeSelectActualIcon from '@material-ui/icons/PhotoSizeSelectActual';\n\n// Components\n// import ChatBubbleIcon from '@material-ui/icons/ChatBubble';\n// import { TodoCreate, TodoEdit, TodoList } from \"./components/todos\";\n// import { AlbumCreate, AlbumEdit, AlbumList } from \"./components/albums\";\nimport { PhotoCreate, PhotoEdit, PhotoList } from \"./components/photos\";\n// import { CommentEdit, CommentList, CommentCreate } from \"./components/comments\";\n\nimport { ProductList, ProductCreate, ProductEdit } from './components/products.js'\nimport { TypeList, TypeEdit, TypeCreate } from './components/type.js'\n//connect the data provider to the REST endpoint\n\nconst config = {\n    apiKey: \"AIzaSyBPL9PszsbYecMBbNT5d-1IRAtntzHamOM\",\n    authDomain: \"tram-huong-dao-quan.firebaseapp.com\",\n    databaseURL: \"https://tram-huong-dao-quan.firebaseio.com\",\n    projectId: \"tram-huong-dao-quan\",\n    storageBucket: \"tram-huong-dao-quan.appspot.com\",\n    messagingSenderId: \"616266967907\",\n    appId: \"1:616266967907:web:27c54629a600863f1c0156\",\n    measurementId: \"G-6241DF2TQX\"\n};\n\nconst options = {\n    // Use a different root document to set your resource collections, by default it uses the root collections of firestore\n    // rootRef: 'root-collection/some-doc',\n    // Your own, previously initialized firebase app instance\n    //     app: firebaseAppInstance,\n    // Enable logging of react-admin-firebase\n    logging: false,\n    // Resources to watch for realtime updates, will implicitly watch all resources by default, if not set.\n    //     watch: ['posts'],\n    // Resources you explicitly dont want realtime updates for\n    //     dontwatch: ['comments'],\n}\n\nconst dataProvider = FirebaseDataProvider(config, options);\nconst firebaseAuthProvider = FirebaseAuthProvider(config, options)\n\nfunction App() {\n    return (\n        <Admin\n            dataProvider={dataProvider}\n            authProvider={firebaseAuthProvider}\n        >\n            <Resource name=\"products\" list={ProductList} edit={ProductEdit} create={ProductCreate} />\n            <Resource name=\"type\" list={TypeList} edit={TypeEdit} create={TypeCreate} />\n\n            {/* <Resource name=\"users\" list={UserList} icon={GroupIcon} /> */}\n            {/* <Resource name=\"posts\" list={PostList} edit={PostEdit} create={PostCreate} icon={PostAddIcon} /> */}\n            {/* <Resource name=\"todos\" list={TodoList} edit={TodoEdit} create={TodoCreate} icon={FormatListBulletedIcon} /> */}\n            {/* <Resource name=\"albums\" list={AlbumList} edit={AlbumEdit} create={AlbumCreate} icon={PhotoAlbumIcon} /> */}\n            {/* <Resource name=\"photos\" list={PhotoList} edit={PhotoEdit} create={PhotoCreate} icon={PhotoSizeSelectActualIcon} /> */}\n            {/* <Resource name=\"comments\" list={CommentList} edit={CommentEdit} create={CommentCreate} icon={ChatBubbleIcon} /> */}\n        </Admin >\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
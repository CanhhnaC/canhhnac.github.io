{"version":3,"sources":["i18n/vi.js","components/products.js","components/type.js","components/posts.js","FIREBASE_CONFIG.js","App.js","serviceWorker.js","index.js"],"names":["messages","vietnameseMessages","resources","posts","name","fields","average_note","body","comments","commentable","commentable_short","created_at","notifications","nb_view","password","pictures","published_at","teaser","tags","title","views","authors","post_id","author","users","role","post","list","search","form","summary","miscellaneous","edit","action","save_and_edit","save_and_add","save_and_show","save_with_average_note","comment","about","user","security","useStyles","makeStyles","tab","maxWidth","display","ProductFilter","props","Filter","TextInput","label","source","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PorductTitle","record","ProductList","List","filters","Datagrid","rowClick","TextField","ReferenceField","ChipField","ProductEdit","classes","Edit","TabbedForm","FormTab","contentClassName","NumberInput","validate","required","InputProps","startAdornment","InputAdornment","position","ImageInput","multiple","accept","ImageField","ProductCreate","Create","TypeTitle","TypeList","TypeEdit","SimpleForm","TypeCreate","PostTitle","PostList","DateField","rowMax","PostEdit","DateTimeInput","PostCreate","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","options","logging","dataProvider","FirebaseDataProvider","config","firebaseAuthProvider","FirebaseAuthProvider","i18nProvider","polyglotI18nProvider","App","Admin","authProvider","Resource","create","icon","ShoppingCartIcon","BookmarkIcon","BookIcon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a873b15.chunk.js","sourcesContent":["import vietnameseMessages from 'ra-language-vietnamese';\r\n\r\nconst messages = {\r\n    ...vietnameseMessages,\r\n    resources: {\r\n        posts: {\r\n            name: 'Bài đăng |||| Posts',\r\n            fields: {\r\n                average_note: 'Average note',\r\n                body: 'Body',\r\n                comments: 'Comments',\r\n                commentable: 'Commentable',\r\n                commentable_short: 'Com.',\r\n                created_at: 'Created at',\r\n                notifications: 'Notifications recipients',\r\n                nb_view: 'Nb views',\r\n                password: 'Password (if protected post)',\r\n                pictures: 'Related Pictures',\r\n                published_at: 'Published at',\r\n                teaser: 'Teaser',\r\n                tags: 'Tags',\r\n                title: 'Title',\r\n                views: 'Views',\r\n                authors: 'Authors',\r\n            },\r\n        },\r\n        comments: {\r\n            name: 'Comment |||| Comments',\r\n            fields: {\r\n                body: 'Body',\r\n                created_at: 'Created at',\r\n                post_id: 'Posts',\r\n                author: {\r\n                    name: 'Author',\r\n                },\r\n            },\r\n        },\r\n        users: {\r\n            name: 'User |||| Users',\r\n            fields: {\r\n                name: 'Name',\r\n                role: 'Role',\r\n            },\r\n        },\r\n    },\r\n    post: {\r\n        list: {\r\n            search: 'Search',\r\n        },\r\n        form: {\r\n            summary: 'Summary',\r\n            body: 'Body',\r\n            miscellaneous: 'Miscellaneous',\r\n            comments: 'Comments',\r\n        },\r\n        edit: {\r\n            title: 'Post \"%{title}\"',\r\n        },\r\n        action: {\r\n            save_and_edit: 'Save and Edit',\r\n            save_and_add: 'Save and Add',\r\n            save_and_show: 'Save and Show',\r\n            save_with_average_note: 'Save with Note',\r\n        },\r\n    },\r\n    comment: {\r\n        list: {\r\n            about: 'About',\r\n        },\r\n    },\r\n    user: {\r\n        list: {\r\n            search: 'Tìm kiếm',\r\n        },\r\n        form: {\r\n            summary: 'Summary',\r\n            security: 'Security',\r\n        },\r\n        edit: {\r\n            title: 'User \"%{title}\"',\r\n        },\r\n        action: {\r\n            save_and_add: 'Save and Add',\r\n            save_and_show: 'Save and Show',\r\n        },\r\n    },\r\n};\r\n\r\nexport default messages;","import React from 'react';\r\nimport {\r\n    List,\r\n    TextInput,\r\n    Edit,\r\n    Create,\r\n    ReferenceInput,\r\n    SelectInput,\r\n    Datagrid,\r\n    ReferenceField,\r\n    TextField,\r\n    Filter,\r\n    NumberInput,\r\n    ChipField,\r\n    TabbedForm,\r\n    FormTab,\r\n    required,\r\n    ImageField,\r\n    ImageInput\r\n} from 'react-admin';\r\nimport RichTextInput from 'ra-input-rich-text';\r\nimport MarkdownInput from 'ra-input-markdown';\r\n\r\n// Material\r\nimport { InputAdornment } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    tab: {\r\n        maxWidth: '40em',\r\n        display: 'block',\r\n    },\r\n});\r\n\r\nconst ProductFilter = props => (\r\n    <Filter {...props}>\r\n        <TextInput label=\"Name\" source=\"name\" alwaysOn />\r\n        <ReferenceInput label=\"Category\" source=\"typesId\" reference=\"types\" allowEmpty>\r\n            <SelectInput optionText=\"name\" />\r\n        </ReferenceInput>\r\n    </Filter>\r\n)\r\n\r\nconst PorductTitle = ({ record }) => {\r\n    return <span>Sản phẩm {record ? `\"${record.name}\"` : ''}</span>;\r\n}\r\n\r\nexport const ProductList = props => (\r\n    <List title=\"Danh sách sản phẩm\" filters={<ProductFilter />} {...props}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" label=\"product id\" />\r\n            <TextField source=\"name\" />\r\n            <TextField source=\"price\" />\r\n            <ReferenceField label=\"Thể loại\" source=\"typesId\" reference=\"types\">\r\n                <ChipField source=\"name\" />\r\n            </ReferenceField>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const ProductEdit = props => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Edit title={<PorductTitle />} {...props}>\r\n            <TabbedForm>\r\n                {/* Thông tin */}\r\n                <FormTab\r\n                    label=\"Thông tin\"\r\n                    contentClassName={classes.tab}\r\n                >\r\n                    <TextInput source=\"id\" />\r\n                    <TextInput source=\"name\" />\r\n                    <NumberInput\r\n                        source=\"price\"\r\n                        validate={required()}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    ₫\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n\r\n                    <ReferenceInput\r\n                        source=\"typesId\"\r\n                        reference=\"types\"\r\n                    >\r\n                        <SelectInput source=\"name\" />\r\n                    </ReferenceInput>\r\n\r\n                </FormTab>\r\n\r\n                {/* Miêu tả sản phẩm */}\r\n                <FormTab label=\"Markdown\" >\r\n                    <MarkdownInput source=\"description-mark\" label=\"\" />\r\n                </FormTab>\r\n\r\n                <FormTab label=\"RichText\" >\r\n                    <RichTextInput source=\"description-rich\" label=\"\" />\r\n                </FormTab>\r\n\r\n\r\n                {/* Hình ảnh */}\r\n                <FormTab label=\"Hình ảnh\" >\r\n                    <ImageInput  {...props} source=\"pictures\" multiple={true} label=\"Related pictures\" accept=\"image/*\">\r\n                        <ImageField source=\"src\" title=\"title\" />\r\n                    </ImageInput>\r\n                </FormTab>\r\n\r\n            </TabbedForm>\r\n        </Edit>\r\n    )\r\n};\r\n\r\nexport const ProductCreate = props => (\r\n    <Create title=\"Tạo sản phẩm mới\" {...props}>\r\n        <TabbedForm>\r\n\r\n            <FormTab label=\"Thông tin\" >\r\n                <TextInput source=\"id\" />\r\n                <TextInput source=\"name\" />\r\n                <NumberInput source=\"price\" />\r\n                <ReferenceInput source=\"typesId\" reference=\"types\">\r\n                    <SelectInput optionText=\"name\" />\r\n                </ReferenceInput>\r\n            </FormTab>\r\n\r\n            <FormTab label=\"Markdown\" >\r\n                <MarkdownInput source=\"description-mark\" label=\"\" />\r\n            </FormTab>\r\n\r\n            <FormTab label=\"RichText\" >\r\n                <RichTextInput source=\"description-rich\" label=\"\" />\r\n            </FormTab>\r\n\r\n            <FormTab label=\"Hình ảnh\" >\r\n                <ImageInput  {...props} source=\"pictures\" multiple={true} label=\"Related pictures\" accept=\"image/*\">\r\n                    <ImageField source=\"src\" title=\"title\" />\r\n                </ImageInput>\r\n            </FormTab>\r\n        </TabbedForm>\r\n    </Create>\r\n);","import React from 'react';\r\nimport {\r\n    List,\r\n    TextInput,\r\n    SimpleForm,\r\n    Edit,\r\n    Create,\r\n    Datagrid,\r\n    TextField,\r\n} from 'react-admin';\r\n\r\nconst TypeTitle = ({ record }) => {\r\n    return <span>Thể loại: {record ? `\"${record.name}\"` : ''}</span>;\r\n}\r\n\r\nexport const TypeList = props => (\r\n    <List title=\"Danh sách thể loại\" {...props}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"name\" />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const TypeEdit = props => (\r\n    <Edit title={<TypeTitle />} {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"id\" />\r\n            <TextInput source=\"name\" />\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const TypeCreate = props => (\r\n    <Create title=\"Tạo thể loại mới\" {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"id\" />\r\n            <TextInput source=\"name\" />\r\n        </SimpleForm>\r\n    </Create>\r\n);","import React from 'react';\r\nimport {\r\n    List,\r\n    TextInput,\r\n    Edit,\r\n    Create,\r\n    Datagrid,\r\n    TextField,\r\n    DateTimeInput,\r\n    DateField, TabbedForm, FormTab, RichTextField\r\n} from 'react-admin';\r\n\r\nimport RichTextInput from 'ra-input-rich-text';\r\nimport MarkdownInput from 'ra-input-markdown';\r\n\r\nconst PostTitle = ({ record }) => {\r\n    return <span>Danh mục: {record ? `\"${record.name}\"` : ''}</span>;\r\n}\r\n\r\nexport const PostList = props => (\r\n    <List {...props} title=\"Danh sách bài viết\">\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"title\" />\r\n            <DateField source=\"date\" />\r\n            <TextField rowMax=\"2\" source=\"description-rich\" />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const PostEdit = props => (\r\n    <Edit title={<PostTitle />} {...props}>\r\n        <TabbedForm>\r\n            {/* Thông tin */}\r\n            <FormTab label=\"Thông tin\">\r\n                <TextInput source=\"id\" />\r\n                <TextInput source=\"name\" label=\"Tên bài\" />\r\n                <TextInput source=\"person\" label=\"Người đăng\" />\r\n                <DateTimeInput source=\"date\" label=\"Ngày đăng\" />\r\n            </FormTab>\r\n\r\n            <FormTab label=\"Markdown\" >\r\n                <MarkdownInput source=\"description-mark\" label=\"\" />\r\n            </FormTab>\r\n\r\n            <FormTab label=\"RichText\" >\r\n                <RichTextInput source=\"description-rich\" label=\"\" />\r\n            </FormTab>\r\n\r\n        </TabbedForm>\r\n    </Edit>\r\n);\r\n\r\nexport const PostCreate = props => (\r\n    <Create {...props} title=\"Tạo bài viết mới\">\r\n        <TabbedForm>\r\n            <FormTab label=\"Thông tin\">\r\n                <TextInput source=\"id\" />\r\n                <TextInput source=\"name\" label=\"Tên bài\" />\r\n                <TextInput source=\"person\" label=\"Người đăng\" />\r\n                <DateTimeInput source=\"date\" label=\"Ngày đăng\" />\r\n            </FormTab>\r\n            <FormTab label=\"Markdown\" >\r\n                <MarkdownInput source=\"description-mark\" label=\"\" />\r\n            </FormTab>\r\n\r\n            <FormTab label=\"RichText\" >\r\n                <RichTextInput source=\"description-rich\" label=\"\" />\r\n            </FormTab>\r\n\r\n        </TabbedForm>\r\n    </Create>\r\n);","export const firebaseConfig = {\r\n    apiKey: \"AIzaSyBPL9PszsbYecMBbNT5d-1IRAtntzHamOM\",\r\n    authDomain: \"tram-huong-dao-quan.firebaseapp.com\",\r\n    databaseURL: \"https://tram-huong-dao-quan.firebaseio.com\",\r\n    projectId: \"tram-huong-dao-quan\",\r\n    storageBucket: \"tram-huong-dao-quan.appspot.com\",\r\n    messagingSenderId: \"616266967907\",\r\n    appId: \"1:616266967907:web:27c54629a600863f1c0156\",\r\n    measurementId: \"G-6241DF2TQX\"\r\n};\r\n\r\nexport const options = {\r\n    // Use a different root document to set your resource collections, by default it uses the root collections of firestore\r\n    // rootRef: 'root-collection/some-doc',\r\n    // Your own, previously initialized firebase app instance\r\n    //     app: firebaseAppInstance,\r\n    // Enable logging of react-admin-firebase\r\n    logging: true,\r\n    // Resources to watch for realtime updates, will implicitly watch all resources by default, if not set.\r\n    //     watch: ['posts'],\r\n    // Resources you explicitly dont want realtime updates for\r\n    //     dontwatch: ['comments'],\r\n}","import React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport { FirebaseAuthProvider, FirebaseDataProvider } from 'react-admin-firebase';\n\n// Icon\nimport BookmarkIcon from '@material-ui/icons/Bookmark';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport BookIcon from '@material-ui/icons/Book';\n\n// Language\nimport polyglotI18nProvider from 'ra-i18n-polyglot';\nimport vietnameseMessages from './i18n/vi';\n\n// Components\nimport { ProductList, ProductCreate, ProductEdit } from './components/products.js'\nimport { TypeList, TypeEdit, TypeCreate } from './components/type.js'\nimport { PostList, PostEdit, PostCreate } from './components/posts.js';\n\n//connect the data provider to the REST endpoint\nimport { firebaseConfig as config, options } from './FIREBASE_CONFIG';\n\nconst dataProvider = FirebaseDataProvider(config, options);\nconst firebaseAuthProvider = FirebaseAuthProvider(config, options)\n\nconst i18nProvider = polyglotI18nProvider(() => vietnameseMessages, 'vi')\n\n\nfunction App() {\n    return (\n        <Admin\n            dataProvider={dataProvider}\n            authProvider={firebaseAuthProvider}\n            i18nProvider={i18nProvider}\n        >\n            <Resource name=\"products\" list={ProductList} edit={ProductEdit} create={ProductCreate} options={{ label: 'Sản phẩm' }} icon={ShoppingCartIcon} />\n            <Resource name=\"types\" list={TypeList} edit={TypeEdit} create={TypeCreate} options={{ label: 'Thể loại' }} icon={BookmarkIcon} />\n            <Resource name=\"posts\" list={PostList} edit={PostEdit} create={PostCreate} options={{ label: 'Bài viết' }} icon={BookIcon} />\n        </Admin >\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}